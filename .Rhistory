getwd()
ls
x=3
class(x)
pi
class(pi)
pi=1
pi
clear
x
pi
pwd
pwd()
pi()
pi(2)
2*pi
pii(pi)
x=pii(pi)
clear
Clear
ext
exit
quit
ls
rmd
markdown
mark down
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
install.packages("knitr")
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
ggplot2
install.packages("ggplot2)
install.packages("ggplot2")
install.packages("KernSmooth")
library(KernSmooth)
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
install.packages("slidify")
install.packages(c("ggplot2", "devtools"))
install_github('slidify', 'ramnathv')
devtools()
?devtools
package.devtools
package.devtools()
packages.devtools()
install_github('slidify', 'ramnathv')
install_github("slidify", "ramnathv")
install_devtools
install_github('slidify', 'ramnathv')
install.packages("slidify")
library(devtools)
library("devtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
slidify
slidify()
create()
library("slidify")
slidify()
?slidify
install.packages("devtools")
require(devtools)
?require
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector()
v$set(20:40)
set
v$set
v$set(1)
v$set
v$set()
v$set(20:40)
v$get()
v
cachemean(v)
cachemean(v)
cachemean(v)
v$set(c(23,23,34.6,654.35))
v$get()
cachemean(v)
cachemean(v)
#Call  the makeVector() function and assign it's
#  return value ( a list of four functions) to a variable, v
#  v is now a list of four functions
# v <- makeVector()
v$set(20:40)
v$get()
g$set(20:40)
g$get()
m
m=c(1:9,3,3)
m
m=c(1:9,nrow=3,n=col3)
m=c(1:9,nrow=3,ncol=3)
m
m=matrix(1:9,nrow=3,ncol=3)
m
m=matrix(1:9,3,3)
m
T(m)
t(m)
m=t(m)
m
install.packages("MASS")
library("mass")
library("MASS")
ginv(m)
solve(m)
solve(m) %*% m
solve(m) % * % m
solve(m)%*%m
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y){
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set= set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if (!is.null(i)){
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
m
makeCacheMatrix(m)
mm= makeCacheMatrix()
mm$set(m)
mm$get
mm$get()
mm$setinverse
mm$setinverse()
mm$setinverse(m)
mm$getinverse()
mm$getinverse(m)
mm$getinverse
mm$getinverse()
cacheSolve(m)
i
mm$get
mm$get()
cacheSolve(mm)
mm$setinverse(m)
cacheSolve(mm)
?NULL
i
m
mm
mm$set$
mm$set$$i
mm$get()
makeCacheMatrix$get()
makeCacheMatrix()$get()
makeCacheMatrix(mm)$get()
set.seed(1)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(1)
x=rpois(5,2)
x
set.seed(2)
x=rpois(5,2)
x
x
set.seed(9999)
rpois(5,2)
rpois(5,2)
rpois(5,2)
rpois(5,9)
rpois(9,9)
rpois(9,2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
y
getwd()
ls
ls()
file.exists("mm")
file.exists("v")
file.exists("v.R")
file.exists("cacheSolve.R")
file.exists("cacheSolve")
dir.create("test")
file.exists("test")
if(!file.exists("test")){dir.create("test")}
x=if(!file.exists("test")){dir.create("test")}
x
fileUrl = https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD
https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
list.files("./data"")
list.files("./data")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
filerl
filUrl
fileUrl
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
curl https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"  -o "./data/cameras.csv
curl "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"  -o "./data/cameras.csv
curl
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
read.csv(fileUrl)
list.files("./data")
fileUrl <- 'http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD'
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
read.csv(fileUrl)
read.csv(fileUrl)
install.packages("downloader")
fileUrl <- "http://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
require("downloader")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "curl")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "wb")
download.file(fileUrl, destfile = "/data/cameras.csv", method = "wb")
download.file(fileUrl, destfile = "/data/cameras.csv", method = "curl")
download.file(fileUrl, destfile = "/data/cameras.csv", method = "internal")
download.file(fileUrl, destfile = "./data/cameras.csv", method = "internal")
download.file(fileUrl, destfile = "cameras.csv", method = "internal")
list.files("")
list.files("./")
dateDownloaded = date()
dateDownloaded
read.table("camera.csv")
read.table(file="camera.csv")
read.table(file="camera.csv", rt)
cameraData=read.table("./data/cameras.csv", sep=",", header = TRUE)
cameraData=read.table("cameras.csv", sep=",", header = TRUE)
head(cameraData)
cameraData=read.table("cameras.csv", sep=",", header = TRUE, skip=4)
head(cameraData)
file="https://data.baltimorecity.gov/api/views/dz54-2aru/rows.xlsx?accessType=DOWNLOAD"
download.file(file, destfile = "cameras.xlsx", method = "internal")
datedown=date()
datedown
ls()
library(xlsx)
library("xlsx")
install.packages("xlsx")
library("xlsx")
library(xlsx)
install.packages("rjava")
install.packages("rJava")
library(xlsx)
find.java()
Sys.setenv(JAVA_HOME='C:\Program Files (x86)\Java\jre7\bin\client')
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7\\bin\\client')
find.java()
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7\\bin')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java')
library(rJava)
find.java()
library(xlsx)
library(XML)
install.packages("XML")
library(XML)
file="http://www.w3schools.com/xml/simple.xml"
doc=xmlTreeParse(fileUrl, useInternal=TRUE)
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc
doc <- xmlTreeParse(file, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[2]]
xmlSApply(rootNode,xmlValue)
library(html)
file="http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(file, useInternal = TRUE)
scores <- xpathSApply(doc, "//lil[@class = 'score']", xmlValue)
teams <- xpathSApply(doc, "//lil[@class = 'team-name']", xmlValue)
scores
scores()
instal.packages("html")
install.packages("html")
doc <- xmlTreeParse(file, useInternal = TRUE)
scores
library(jsonlite)
install.packages(jsonline)
install.packages("jsonline)
install.packages("jsonline")
install.packages("jsonlite")
install.packages("jsonlite")
install.packages("htmltools")
install.packages("HTMLUtils")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$id)
names(jsonData$name)
names(jsonData$owner)
names(jsonData$owner$login)
jsonData$owner$login
library(data.table)
install.packages("data.table")
library(data.table)
library(data.table)
dataa=read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
names(dataa)
class(dataa)
names(dataa$SERIALNO)
head(dataa)
dataa[[2]][[1]]
dataa&FES
library(xls)
library(xlsx)
install.packages("rJava")
read.xlsx()
library(xls)
library(datasets)
data(cars)
with(cars,plot(speed,dist))
is.list(cars)
x=unlist(cars)
with(x,plot(speed,dist))
x
with(cars,plot(speed,dist))
par(mar = rep(2, 4))
with(cars,plot(speed,dist))
library(lattice)
state <- data.frame(state.x77, region =state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
qplot(displ, hwy, data=mpg)
?par
hist(airquality$ozone)
hist(airquality$0zone)
hist(airquality$Ozone)
airquality <- transform(airquality, Month =factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone(ppb)")
par("lty")
par("mar")
par("mar")
par("mfrow")
par("bg")
par("ee")
#create .png file
setwd("~/Desktop/Coursera/DataScienceSpecialization/Exploratory Data Analysis")
# read in desired dates
DF <- read.table(pipe('egrep \'^Date|^[1-2]/2/2007\' household_power_consumption.txt'), header=TRUE, sep=';')
#create .png file
png(filename = "plot1.png", width=480, height=480)
# create histogram
hist(DF$Global_active_power, xlab = "Global Active Power (kilowatts)",
main = "Global Active Power", col="red")
dev.off()
#get data from remote folder
setwd("~/Desktop/Coursera/DataScienceSpecialization/Exploratory Data Analysis")
# read in only desired dates
DF <- read.table(pipe('egrep \'^Date|^[1-2]/2/2007\' household_power_consumption.txt'), header=TRUE, sep=';')
# convert data for x axis
xAxis <- strptime(paste(DF$Date, DF$Time), format = '%d/%m/%Y %H:%M:%S')
#create .png file
png(filename = "plot2.png", width=480, height=480)
# create line plot
plot(xAxis, DF$Global_active_power, type="l",
xlab="", ylab="Global Active Power (kilowatts)")
dev.off()
setwd("~/")
setwd("C://Users//Helder Monteiro//Desktop//Coursera//DataScienceSpecialization//Exploratory Data Analysis")
ge <- 'egrep \'^Date|^[1-2]/2/2007\' household_power_consumption.txt'
consumption <- read.table(pipe(ge), header=T, sep=";")
## Create a histogram of global active power on
## screen device
hist(consumption$Global_active_power,
xlab = "Global Active Power (kilowatts)",
ylab = "Frequency",
main = "Global Active Power", col = "red")
## Copy the plot to a PNG file with a width of
## 480 pixels and a height of 480 pixels
dev.copy(png, file = "plot1.png", width = 480, height = 480)
## Close the PNG device
dev.off()
setwd("C:/Users/Helder Monteiro/Desktop/Coursera/DataScienceSpecialization/Exploratory Data Analysis")
setwd("C:\Users\Helder Monteiro\ExData_Plotting1")
setwd("C:/Users/Helder Monteiro/ExData_Plotting1")
setwd("C:/Users/Helder Monteiro/ExData_Plotting1")
